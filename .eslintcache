[{"C:\\Projects\\prop-investor\\src\\index.tsx":"1","C:\\Projects\\prop-investor\\src\\serviceWorker.ts":"2","C:\\Projects\\prop-investor\\src\\root\\store.ts":"3","C:\\Projects\\prop-investor\\src\\root\\App.tsx":"4","C:\\Projects\\prop-investor\\src\\api\\setupAxios.js":"5","C:\\Projects\\prop-investor\\src\\root\\rootSagas.tsx":"6","C:\\Projects\\prop-investor\\src\\root\\rootReducer.tsx":"7","C:\\Projects\\prop-investor\\src\\modules\\home\\index.js":"8","C:\\Projects\\prop-investor\\src\\modules\\myProfile\\index.js":"9","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\index.js":"10","C:\\Projects\\prop-investor\\src\\modules\\home\\sagas.ts":"11","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\sagas.ts":"12","C:\\Projects\\prop-investor\\src\\modules\\properties\\index.js":"13","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\index.js":"14","C:\\Projects\\prop-investor\\src\\modules\\navigationPanel\\index.js":"15","C:\\Projects\\prop-investor\\src\\modules\\properties\\sagas.ts":"16","C:\\Projects\\prop-investor\\src\\modules\\properties\\reducer.ts":"17","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\sagas.ts":"18","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\reducer.ts":"19","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\reducer.ts":"20","C:\\Projects\\prop-investor\\src\\modules\\home\\reducer.ts":"21","C:\\Projects\\prop-investor\\src\\models\\authorization\\sagas.ts":"22","C:\\Projects\\prop-investor\\src\\models\\authorization\\reducer.ts":"23","C:\\Projects\\prop-investor\\src\\modules\\properties\\constants.js":"24","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\constants.js":"25","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\actionTypes.ts":"26","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\actions.ts":"27","C:\\Projects\\prop-investor\\src\\modules\\properties\\actions.ts":"28","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\actionTypes.ts":"29","C:\\Projects\\prop-investor\\src\\modules\\home\\actionTypes.ts":"30","C:\\Projects\\prop-investor\\src\\models\\authorization\\constants.js":"31","C:\\Projects\\prop-investor\\src\\modules\\properties\\actionTypes.ts":"32","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\constants.js":"33","C:\\Projects\\prop-investor\\src\\modules\\properties\\container.tsx":"34","C:\\Projects\\prop-investor\\src\\modules\\navigationPanel\\container.tsx":"35","C:\\Projects\\prop-investor\\src\\models\\authorization\\actionTypes.ts":"36","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\container.tsx":"37","C:\\Projects\\prop-investor\\src\\models\\authorization\\actions.ts":"38","C:\\Projects\\prop-investor\\src\\api\\restService.js":"39","C:\\Projects\\prop-investor\\src\\utils\\asyncActions.js":"40","C:\\Projects\\prop-investor\\src\\modules\\home\\constants.js":"41","C:\\Projects\\prop-investor\\src\\utils\\helpers.js":"42","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\actions.ts":"43","C:\\Projects\\prop-investor\\src\\modules\\home\\actions.ts":"44","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\selectors.js":"45","C:\\Projects\\prop-investor\\src\\root\\moduleNames.tsx":"46","C:\\Projects\\prop-investor\\src\\modules\\home\\container.tsx":"47","C:\\Projects\\prop-investor\\src\\modules\\myProfile\\container.tsx":"48","C:\\Projects\\prop-investor\\src\\modules\\properties\\selectors.js":"49","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\container.tsx":"50","C:\\Projects\\prop-investor\\src\\root\\modelNames.tsx":"51","C:\\Projects\\prop-investor\\src\\modules\\navigationPanel\\navigationPanel.tsx":"52","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\myInvestments.tsx":"53","C:\\Projects\\prop-investor\\src\\modules\\properties\\properties.tsx":"54","C:\\Projects\\prop-investor\\src\\modules\\home\\selectors.js":"55","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\selectors.js":"56","C:\\Projects\\prop-investor\\src\\models\\authorization\\selectors.js":"57","C:\\Projects\\prop-investor\\src\\modules\\home\\home.tsx":"58","C:\\Projects\\prop-investor\\src\\modules\\myProfile\\myProfile.tsx":"59","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\propertyDetails.tsx":"60","C:\\Projects\\prop-investor\\src\\components\\sidebar\\sidebar.tsx":"61","C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\loginSignupForm.tsx":"62","C:\\Projects\\prop-investor\\src\\components\\propertyTile\\propertyTile.tsx":"63","C:\\Projects\\prop-investor\\src\\components\\registerNewProperty\\registerNewProperty.tsx":"64","C:\\Projects\\prop-investor\\src\\utils\\constants\\states.js":"65","C:\\Projects\\prop-investor\\src\\utils\\formValidity\\validation.js":"66","C:\\Projects\\prop-investor\\src\\utils\\formValidity\\constants.js":"67","C:\\Projects\\prop-investor\\src\\utils\\constants\\countries.js":"68","C:\\Projects\\prop-investor\\src\\components\\formGenerator\\formFeedback.tsx":"69","C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\signUpForm.tsx":"70","C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\loginForm.tsx":"71","C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\constants.js":"72","C:\\Projects\\prop-investor\\src\\utils\\constants\\imageConstants.js":"73","C:\\Projects\\prop-investor\\src\\models\\loader\\reducer.ts":"74","C:\\Projects\\prop-investor\\src\\models\\loader\\actionTypes.ts":"75","C:\\Projects\\prop-investor\\src\\models\\loader\\actions.ts":"76","C:\\Projects\\prop-investor\\src\\models\\loader\\container.tsx":"77","C:\\Projects\\prop-investor\\src\\models\\loader\\selectors.js":"78","C:\\Projects\\prop-investor\\src\\models\\loader\\loader.tsx":"79","C:\\Projects\\prop-investor\\src\\models\\loader\\constants.js":"80"},{"size":530,"mtime":1622281690000,"results":"81","hashOfConfig":"82"},{"size":5278,"mtime":1622281690000,"results":"83","hashOfConfig":"82"},{"size":526,"mtime":1622281690000,"results":"84","hashOfConfig":"82"},{"size":1245,"mtime":1627761183216,"results":"85","hashOfConfig":"82"},{"size":658,"mtime":1626614989012,"results":"86","hashOfConfig":"82"},{"size":522,"mtime":1624102172000,"results":"87","hashOfConfig":"82"},{"size":565,"mtime":1627760956781,"results":"88","hashOfConfig":"82"},{"size":54,"mtime":1622281690000,"results":"89","hashOfConfig":"82"},{"size":64,"mtime":1622281690000,"results":"90","hashOfConfig":"82"},{"size":76,"mtime":1622281690000,"results":"91","hashOfConfig":"82"},{"size":694,"mtime":1622281690000,"results":"92","hashOfConfig":"82"},{"size":870,"mtime":1627761795545,"results":"93","hashOfConfig":"82"},{"size":66,"mtime":1622281690000,"results":"94","hashOfConfig":"82"},{"size":72,"mtime":1624098618000,"results":"95","hashOfConfig":"82"},{"size":76,"mtime":1622281690000,"results":"96","hashOfConfig":"82"},{"size":1392,"mtime":1627761991801,"results":"97","hashOfConfig":"82"},{"size":2160,"mtime":1624712757622,"results":"98","hashOfConfig":"82"},{"size":954,"mtime":1627762416546,"results":"99","hashOfConfig":"82"},{"size":1298,"mtime":1624099844000,"results":"100","hashOfConfig":"82"},{"size":1568,"mtime":1624715304647,"results":"101","hashOfConfig":"82"},{"size":1279,"mtime":1624715314100,"results":"102","hashOfConfig":"82"},{"size":2547,"mtime":1626939282696,"results":"103","hashOfConfig":"82"},{"size":4843,"mtime":1628357948483,"results":"104","hashOfConfig":"82"},{"size":183,"mtime":1626018508976,"results":"105","hashOfConfig":"82"},{"size":111,"mtime":1622281690000,"results":"106","hashOfConfig":"82"},{"size":372,"mtime":1624098488000,"results":"107","hashOfConfig":"82"},{"size":667,"mtime":1622281690000,"results":"108","hashOfConfig":"82"},{"size":1009,"mtime":1622283666000,"results":"109","hashOfConfig":"82"},{"size":476,"mtime":1622281690000,"results":"110","hashOfConfig":"82"},{"size":330,"mtime":1622281690000,"results":"111","hashOfConfig":"82"},{"size":309,"mtime":1622976722000,"results":"112","hashOfConfig":"82"},{"size":673,"mtime":1622283496000,"results":"113","hashOfConfig":"82"},{"size":101,"mtime":1627755585306,"results":"114","hashOfConfig":"82"},{"size":603,"mtime":1622285244000,"results":"115","hashOfConfig":"82"},{"size":738,"mtime":1622281690000,"results":"116","hashOfConfig":"82"},{"size":1276,"mtime":1622976590000,"results":"117","hashOfConfig":"82"},{"size":460,"mtime":1624099890000,"results":"118","hashOfConfig":"82"},{"size":2045,"mtime":1622978492000,"results":"119","hashOfConfig":"82"},{"size":1677,"mtime":1626018508914,"results":"120","hashOfConfig":"82"},{"size":182,"mtime":1624098718000,"results":"121","hashOfConfig":"82"},{"size":99,"mtime":1622281690000,"results":"122","hashOfConfig":"82"},{"size":503,"mtime":1624100978000,"results":"123","hashOfConfig":"82"},{"size":521,"mtime":1624098540000,"results":"124","hashOfConfig":"82"},{"size":526,"mtime":1622281690000,"results":"125","hashOfConfig":"82"},{"size":368,"mtime":1624099874000,"results":"126","hashOfConfig":"82"},{"size":250,"mtime":1624098198000,"results":"127","hashOfConfig":"82"},{"size":443,"mtime":1622281690000,"results":"128","hashOfConfig":"82"},{"size":553,"mtime":1622978424000,"results":"129","hashOfConfig":"82"},{"size":487,"mtime":1622285162000,"results":"130","hashOfConfig":"82"},{"size":532,"mtime":1622281690000,"results":"131","hashOfConfig":"82"},{"size":107,"mtime":1627760888011,"results":"132","hashOfConfig":"82"},{"size":3998,"mtime":1627738239091,"results":"133","hashOfConfig":"82"},{"size":1834,"mtime":1627761077780,"results":"134","hashOfConfig":"82"},{"size":1967,"mtime":1622986568000,"results":"135","hashOfConfig":"82"},{"size":358,"mtime":1622281690000,"results":"136","hashOfConfig":"82"},{"size":374,"mtime":1622281690000,"results":"137","hashOfConfig":"82"},{"size":783,"mtime":1622978138000,"results":"138","hashOfConfig":"82"},{"size":1925,"mtime":1627738379245,"results":"139","hashOfConfig":"82"},{"size":20150,"mtime":1627762291017,"results":"140","hashOfConfig":"82"},{"size":11127,"mtime":1628363227342,"results":"141","hashOfConfig":"82"},{"size":1139,"mtime":1622281690000,"results":"142","hashOfConfig":"82"},{"size":1291,"mtime":1622281690000,"results":"143","hashOfConfig":"82"},{"size":1346,"mtime":1627757341832,"results":"144","hashOfConfig":"82"},{"size":17193,"mtime":1627758012649,"results":"145","hashOfConfig":"82"},{"size":442515,"mtime":1623998412000,"results":"146","hashOfConfig":"82"},{"size":2212,"mtime":1627757942692,"results":"147","hashOfConfig":"82"},{"size":2824,"mtime":1627758003965,"results":"148","hashOfConfig":"82"},{"size":12603,"mtime":1622281690000,"results":"149","hashOfConfig":"82"},{"size":500,"mtime":1622281690000,"results":"150","hashOfConfig":"82"},{"size":12918,"mtime":1624814555568,"results":"151","hashOfConfig":"82"},{"size":5355,"mtime":1622281690000,"results":"152","hashOfConfig":"82"},{"size":33130,"mtime":1622281690000,"results":"153","hashOfConfig":"82"},{"size":47,"mtime":1628363506049,"results":"154","hashOfConfig":"82"},{"size":794,"mtime":1627761720304,"results":"155","hashOfConfig":"82"},{"size":116,"mtime":1627760127858,"results":"156","hashOfConfig":"82"},{"size":215,"mtime":1627760673751,"results":"157","hashOfConfig":"82"},{"size":313,"mtime":1627760857636,"results":"158","hashOfConfig":"82"},{"size":351,"mtime":1627760921860,"results":"159","hashOfConfig":"82"},{"size":412,"mtime":1627761752391,"results":"160","hashOfConfig":"82"},{"size":32,"mtime":1627760286302,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"1lzs3du",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"164"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"164"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"164"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"164"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"164"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"164"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"164"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"164"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"164"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"164"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"164"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"164"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"164"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"164"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"164"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"173"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"164"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},"C:\\Projects\\prop-investor\\src\\index.tsx",[],["343","344"],"C:\\Projects\\prop-investor\\src\\serviceWorker.ts",[],"C:\\Projects\\prop-investor\\src\\root\\store.ts",[],"C:\\Projects\\prop-investor\\src\\root\\App.tsx",[],"C:\\Projects\\prop-investor\\src\\api\\setupAxios.js",[],["345","346"],"C:\\Projects\\prop-investor\\src\\root\\rootSagas.tsx",[],"C:\\Projects\\prop-investor\\src\\root\\rootReducer.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\index.js",[],"C:\\Projects\\prop-investor\\src\\modules\\myProfile\\index.js",[],"C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\index.js",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\sagas.ts",["347"],"import { takeLatest, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"./actions\";\nimport { getRequest } from \"api/restService\";\nimport * as constants from \"./constants\";\n\nexport function* fetchPopularHouses() {\n  yield put(actions.fetchPopularHousesPending());\n  try {\n    const response = yield getRequest({\n      url: constants.POPULAR_HOUSES_URL.endpoint,\n    });\n    yield put(actions.fetchPopularHousesSuccess(response.data));\n  } catch (e) {\n    yield put(actions.fetchPopularHousesFailure(e));\n  }\n}\n\nexport const onGetDetails = takeLatest(\n  actionTypes.GET_POPULAR_HOUSES,\n  fetchPopularHouses\n);\n\nexport default [onGetDetails];\n","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\sagas.ts",["348"],"import { takeLatest, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"./actions\";\nimport * as loaderActions from \"models/loader/actions\";\nimport { getRequest } from \"api/restService\";\nimport * as constants from \"./constants\";\n\nexport function* fetchMyInvestments() {\n  yield put(actions.fetchMyInvestmentsPending());\n  yield put(loaderActions.showLoader());\n  try {\n    const response = yield getRequest({\n      url: constants.MY_INVESTMENT_URL.endpoint\n    });\n    yield put(actions.fetchMyInvestmentsSuccess(response));\n    yield put(loaderActions.hideLoader());\n  } catch (e) {\n    yield put(actions.fetchMyInvestmentsFailure(e));\n    yield put(loaderActions.hideLoader());\n  }\n}\n\nexport const onGetDetails = takeLatest(\n  actionTypes.GET_MY_INVESTMENTS,\n  fetchMyInvestments\n);\n\nexport default [onGetDetails];\n","C:\\Projects\\prop-investor\\src\\modules\\properties\\index.js",[],"C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\index.js",[],"C:\\Projects\\prop-investor\\src\\modules\\navigationPanel\\index.js",[],"C:\\Projects\\prop-investor\\src\\modules\\properties\\sagas.ts",["349"],"import { takeLatest, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"./actions\";\nimport * as loaderActions from 'models/loader/actions';\nimport { getRequest, postRequest } from \"api/restService\";\nimport * as constants from \"./constants\";\n\nexport function* fetchAllProperties() {\n  yield put(actions.fetchAllPropertiesPending());\n  yield put(loaderActions.showLoader());\n  try {\n    const response = yield getRequest({\n      url: constants.ALL_PROPERTIES_URL.endpoint,\n    });\n    yield put(actions.fetchAllPropertiesSuccess(response.data));\n    yield put(loaderActions.hideLoader());\n  } catch (e) {\n    yield put(actions.fetchAllPropertiesFailure(e));\n    yield put(loaderActions.hideLoader());\n  }\n}\n\nexport function* initiateRegisterProperty(action) {\n  yield put(actions.registerPropertyPending());\n  try {\n    const response = yield postRequest({\n      url: constants.REGISTER_PROPERTY_URL.endpoint,\n      body: action.data,\n    });\n    yield put(actions.registerPropertySuccess(response.data));\n  } catch (e) {\n    yield put(actions.registerPropertyFailure(e));\n  }\n}\n\nexport const onGetDetails = takeLatest(\n  actionTypes.GET_ALL_PROPERTIES,\n  fetchAllProperties\n);\n\nexport const onRegisterProperty = takeLatest(\n  actionTypes.REGISTER_PROPERTY,\n  initiateRegisterProperty\n);\n\nexport default [onGetDetails, onRegisterProperty];\n","C:\\Projects\\prop-investor\\src\\modules\\properties\\reducer.ts",["350"],"import * as actionTypes from \"./actionTypes\";\nimport _ from \"lodash\";\nimport * as moduleNames from \"root/moduleNames\";\nimport * as asyncActions from \"utils/asyncActions\";\n\nexport const initialState = {\n  allProperties: { status: asyncActions.NONE, data: [] },\n  registerProperty: { status: asyncActions.NONE },\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ALL_PROPERTIES_SUCCESS:\n      return handleGetAllPropertiesSuccess(state, action);\n\n    case actionTypes.GET_ALL_PROPERTIES_FAILURE:\n      return handleGetAllPropertiesFailure(state, action);\n\n    case actionTypes.GET_ALL_PROPERTIES_PENDING:\n      return handleGetAllPropertiesPending(state);\n\n    case actionTypes.REGISTER_PROPERTY_SUCCESS:\n      return handleRegisterPropertySuccess(state, action);\n\n    case actionTypes.REGISTER_PROPERTY_FAILURE:\n      return handleRegisterPropertyFailure(state, action);\n\n    case actionTypes.REGISTER_PROPERTY_PENDING:\n      return handleRegisterPropertyPending(state);\n\n    default:\n      return state;\n  }\n};\n\nfunction handleGetAllPropertiesSuccess(state, action) {\n  return _.defaults(\n    {\n      allProperties: {\n        status: asyncActions.SUCCESS,\n        data: action.response,\n      },\n    },\n    state\n  );\n}\n\nfunction handleGetAllPropertiesFailure(state, action) {\n  return _.defaults(\n    { allProperties: { status: asyncActions.FAILURE, data: action.data } },\n    state\n  );\n}\n\nfunction handleGetAllPropertiesPending(state) {\n  return _.defaults({ allProperties: { status: asyncActions.PENDING } }, state);\n}\n\nfunction handleRegisterPropertySuccess(state, action) {\n  return _.defaults(\n    {\n      registerProperty: { status: asyncActions.SUCCESS },\n    },\n    state\n  );\n}\n\nfunction handleRegisterPropertyFailure(state, action) {\n  return _.defaults(\n    {\n      registerProperty: { status: asyncActions.FAILURE, message: action.data },\n    },\n    state\n  );\n}\n\nfunction handleRegisterPropertyPending(state) {\n  return _.defaults(\n    {\n      registerProperty: { status: asyncActions.PENDING },\n    },\n    state\n  );\n}\n\nexport default { [moduleNames.PROPERTIES_MODULE]: reducer };\n","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\sagas.ts",["351"],"import { takeLatest, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"./actions\";\nimport * as loaderActions from \"models/loader/actions\";\nimport { getRequest } from \"api/restService\";\nimport * as constants from \"./constants\";\n\nexport function* fetchPropertyDetails(data) {\n  yield put(actions.fetchPropertyDetailsPending());\n  yield put(loaderActions.showLoader());\n  try {\n    const response = yield getRequest({\n      url: constants.PROPERTY_DETAILS_URL.endpoint,\n      interpolateParams: { propertyId: data.propertyId },\n    });\n    yield put(actions.fetchPropertyDetailsSuccess(response?.data));\n    yield put(loaderActions.hideLoader());\n  } catch (e) {\n    yield put(actions.fetchPropertyDetailsFailure(e));\n    yield put(loaderActions.hideLoader());\n  }\n}\n\nexport const onGetDetails = takeLatest(\n  actionTypes.GET_PROPERTY_DETAILS,\n  fetchPropertyDetails\n);\n\nexport default [onGetDetails];\n","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\reducer.ts",["352"],"import * as actionTypes from \"./actionTypes\";\nimport _ from \"lodash\";\nimport * as moduleNames from \"root/moduleNames\";\nimport * as asyncActions from \"utils/asyncActions\";\n\nexport const initialState = {\n  myInvestments: { status: asyncActions.NONE, data: {} },\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_MY_INVESTMENTS_SUCCESS:\n      return handleGetMyInvestmentsSuccess(state, action);\n\n    case actionTypes.GET_MY_INVESTMENTS_FAILURE:\n      return handleGetMyInvestmentsFailure(state, action);\n\n    case actionTypes.GET_MY_INVESTMENTS_PENDING:\n      return handleGetMyInvestmentsPending(state);\n\n    default:\n      return state;\n  }\n};\n\nfunction handleGetMyInvestmentsSuccess(state, action) {\n  return _.defaults(\n    {\n      myInvestments: {\n        status: asyncActions.SUCCESS,\n        data: action.data.data,\n      },\n    },\n    state\n  );\n}\n\nfunction handleGetMyInvestmentsFailure(state, action) {\n  return _.defaults(\n    { myInvestments: { status: asyncActions.FAILURE, data: action.data } },\n    state\n  );\n}\n\nfunction handleGetMyInvestmentsPending(state) {\n  return _.defaults(\n    { myInvestments: { status: asyncActions.PENDING } },\n    state\n  );\n}\n\nexport default { [moduleNames.MY_INVESTMENTS_MODULE]: reducer };\n","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\reducer.ts",["353"],"import * as actionTypes from \"./actionTypes\";\nimport _ from \"lodash\";\nimport * as moduleNames from \"root/moduleNames\";\nimport * as asyncActions from \"utils/asyncActions\";\n\nexport const initialState = {\n  propertyDetails: { status: asyncActions.NONE, data: {} },\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_PROPERTY_DETAILS_SUCCESS:\n      return handleGetPropertyDetailsSuccess(state, action);\n\n    case actionTypes.GET_PROPERTY_DETAILS_FAILURE:\n      return handleGetPropertyDetailsFailure(state, action);\n\n    case actionTypes.GET_PROPERTY_DETAILS_PENDING:\n      return handleGetPropertyDetailsPending(state);\n\n    case actionTypes.RESET_PROPERTY_DETAILS:\n      return handleResetPropertyDetails(state);\n\n    default:\n      return state;\n  }\n};\n\nfunction handleGetPropertyDetailsSuccess(state, action) {\n  return _.defaults(\n    {\n      propertyDetails: {\n        status: asyncActions.SUCCESS,\n        data: action.data[0],\n      },\n    },\n    state\n  );\n}\n\nfunction handleGetPropertyDetailsFailure(state, action) {\n  return _.defaults(\n    { propertyDetails: { status: asyncActions.FAILURE, data: action.data } },\n    state\n  );\n}\n\nfunction handleGetPropertyDetailsPending(state) {\n  return _.defaults(\n    { propertyDetails: { status: asyncActions.PENDING } },\n    state\n  );\n}\n\nfunction handleResetPropertyDetails(state) {\n  return _.defaults(\n    { propertyDetails: { status: asyncActions.NONE, data: {} } },\n    state\n  );\n}\n\nexport default { [moduleNames.PROPERTY_DETAILS_MODULE]: reducer };\n","C:\\Projects\\prop-investor\\src\\modules\\home\\reducer.ts",["354"],"import * as actionTypes from \"./actionTypes\";\nimport _ from \"lodash\";\nimport * as moduleNames from \"root/moduleNames\";\nimport * as asyncActions from \"utils/asyncActions\";\n\nexport const initialState = {\n  popularHouses: { status: asyncActions.NONE, data: [] },\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_POPULAR_HOUSES_SUCCESS:\n      return handleGetPopularHousesSuccess(state, action);\n\n    case actionTypes.GET_POPULAR_HOUSES_FAILURE:\n      return handleGetPopularHousesFailure(state, action);\n\n    case actionTypes.GET_POPULAR_HOUSES_PENDING:\n      return handleGetPopularHousesPending(state);\n\n    default:\n      return state;\n  }\n};\n\nfunction handleGetPopularHousesSuccess(state, action) {\n  return _.defaults(\n    {\n      popularHouses: {\n        status: asyncActions.SUCCESS,\n        data: action.response,\n      },\n    },\n    state\n  );\n}\n\nfunction handleGetPopularHousesFailure(state, action) {\n  return _.defaults(\n    { popularHouses: { status: asyncActions.FAILURE, data: action.response } },\n    state\n  );\n}\n\nfunction handleGetPopularHousesPending(state) {\n  return _.defaults({ popularHouses: { status: asyncActions.PENDING } }, state);\n}\n\nexport default { [moduleNames.HOME_MODULE]: reducer };\n","C:\\Projects\\prop-investor\\src\\models\\authorization\\sagas.ts",["355"],"import { takeLatest, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"./actions\";\nimport { postRequest, getRequest } from \"api/restService\";\nimport * as constants from \"./constants\";\n\nexport function* initiateLogin(action) {\n  console.log(action.data);\n  yield put(actions.loginPending());\n  try {\n    const response = yield postRequest({\n      url: constants.LOGIN.endpoint,\n      body: action.data,\n    });\n    yield put(actions.loginSuccess(response));\n  } catch (e) {\n    yield put(actions.loginFailure(e));\n  }\n}\n\nexport function* initiateSignUp(action) {\n  console.log(action.data);\n  yield put(actions.signupPending());\n  try {\n    const response = yield postRequest({\n      url: constants.SIGNUP.endpoint,\n      body: action.data,\n    });\n    yield put(actions.signupSuccess(response));\n  } catch (e) {\n    yield put(actions.signupFailure(e));\n  }\n}\n\nexport function* initiateLogout() {\n  yield put(actions.logoutPending());\n  try {\n    const response = yield postRequest({\n      url: constants.LOGOUT.endpoint,\n    });\n    if (response.status === 200) {\n      yield put(actions.logoutSuccess());\n    } else {\n      yield put(actions.logoutFailure());\n    }\n  } catch (e) {\n    yield put(actions.logoutFailure());\n  }\n}\n\nexport function* initiateFetchUser() {\n  yield put(actions.fetchUserPending());\n  try {\n    const response = yield getRequest({\n      url: constants.FETCH_USER.endpoint,\n    });\n    if (response.status === 200) {\n      yield put(actions.fetchUserSuccess(response.data));\n    } else {\n      yield put(actions.fetchUserFailure(response.data));\n    }\n  } catch (e) {\n    yield put(actions.fetchUserFailure({ data: \"Something went wrong\" }));\n  }\n}\n\nexport function* initiateUpdateUser(action) {\n  yield put(actions.updateUserPending());\n  try {\n    const response = yield postRequest({\n      url: constants.UPDATE_USER.endpoint,\n      body: action.data,\n    });\n    yield put(actions.updateUserSuccess(response, action.data));\n  } catch (e) {\n    yield put(actions.updateUserFailure(e));\n  }\n}\n\nexport const onLogin = takeLatest(actionTypes.LOGIN, initiateLogin);\n\nexport const onSignUp = takeLatest(actionTypes.SIGNUP, initiateSignUp);\n\nexport const onLogout = takeLatest(actionTypes.LOGOUT, initiateLogout);\n\nexport const onFetchUser = takeLatest(\n  actionTypes.FETCH_USER,\n  initiateFetchUser\n);\n\nexport const onUpdateUser = takeLatest(\n  actionTypes.UPDATE_USER,\n  initiateUpdateUser\n);\n\nexport default [onLogin, onSignUp, onLogout, onFetchUser, onUpdateUser];\n","C:\\Projects\\prop-investor\\src\\models\\authorization\\reducer.ts",["356"],"import * as actionTypes from \"./actionTypes\";\r\nimport _ from \"lodash\";\r\nimport * as modelNames from \"root/modelNames\";\r\nimport * as asyncActions from \"utils/asyncActions\";\r\nimport * as helpers from \"utils/helpers\";\r\n\r\nexport const initialState = {\r\n  login: { status: asyncActions.NONE },\r\n  signup: { status: asyncActions.NONE },\r\n  logout: { status: asyncActions.NONE },\r\n  fetchUser: { status: asyncActions.NONE },\r\n  updateUser: { status: asyncActions.NONE },\r\n  userDetails: {},\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOGIN_SUCCESS:\r\n      return handleLoginSuccess(state, action);\r\n\r\n    case actionTypes.LOGIN_FAILURE:\r\n      return handleLoginFailure(state, action);\r\n\r\n    case actionTypes.LOGIN_PENDING:\r\n      return handleLoginPending(state);\r\n\r\n    case actionTypes.SIGNUP_SUCCESS:\r\n      return handleSignUpSuccess(state, action);\r\n\r\n    case actionTypes.SIGNUP_FAILURE:\r\n      return handleSignUpFailure(state, action);\r\n\r\n    case actionTypes.SIGNUP_PENDING:\r\n      return handleSignUpPending(state);\r\n\r\n    case actionTypes.LOGOUT_SUCCESS:\r\n      return handleLogoutSuccess();\r\n\r\n    case actionTypes.LOGOUT_FAILURE:\r\n      return handleLogoutFailure();\r\n\r\n    case actionTypes.LOGOUT_PENDING:\r\n      return handleLogoutPending(state);\r\n\r\n    case actionTypes.FETCH_USER_SUCCESS:\r\n      return handleFetchUserSuccess(state, action);\r\n\r\n    case actionTypes.FETCH_USER_FAILURE:\r\n      return handleFetchUserFailure(state, action);\r\n\r\n    case actionTypes.FETCH_USER_PENDING:\r\n      return handleFetchUserPending(state);\r\n\r\n    case actionTypes.UPDATE_USER_SUCCESS:\r\n      return handleUpdateUserSuccess(state, action);\r\n\r\n    case actionTypes.UPDATE_USER_FAILURE:\r\n      return handleUpdateUserFailure(state, action);\r\n\r\n    case actionTypes.UPDATE_USER_PENDING:\r\n      return handleUpdateUserPending(state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction handleLoginSuccess(state, action) {\r\n  helpers.setToken(action?.response?.jwt);\r\n  return _.defaults(\r\n    {\r\n      login: { status: asyncActions.SUCCESS },\r\n      userDetails: action?.response?.user,\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleLoginFailure(state, action) {\r\n  return _.defaults(\r\n    {\r\n      login: { status: asyncActions.FAILURE, message: action.data },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleLoginPending(state) {\r\n  return _.defaults(\r\n    {\r\n      login: { status: asyncActions.PENDING },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleSignUpSuccess(state, action) {\r\n  return _.defaults(\r\n    {\r\n      signup: { status: asyncActions.SUCCESS, message: action?.data?.message },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleSignUpFailure(state, action) {\r\n  return _.defaults(\r\n    {\r\n      signup: { status: asyncActions.FAILURE, message: action.data },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleSignUpPending(state) {\r\n  return _.defaults(\r\n    {\r\n      signup: { status: asyncActions.PENDING },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\nfunction handleLogoutSuccess() {\r\n  helpers.clearToken();\r\n  return initialState;\r\n}\r\n\r\nfunction handleLogoutFailure() {\r\n  helpers.clearToken();\r\n  return initialState;\r\n}\r\n\r\nfunction handleLogoutPending(state) {\r\n  return _.defaults(\r\n    {\r\n      logout: { status: asyncActions.PENDING },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleFetchUserSuccess(state, action) {\r\n  helpers.setToken(action?.response?.token);\r\n  return _.defaults(\r\n    {\r\n      fetchUser: { status: asyncActions.SUCCESS },\r\n      userDetails: action.response,\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleFetchUserFailure(state, action) {\r\n  helpers.clearToken();\r\n  return _.defaults(\r\n    {\r\n      fetchUser: { status: asyncActions.FAILURE, message: action.data },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleFetchUserPending(state) {\r\n  return _.defaults(\r\n    {\r\n      fetchUser: { status: asyncActions.PENDING },\r\n      userDetails: {},\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleUpdateUserSuccess(state, action) {\r\n  return _.defaults(\r\n    {\r\n      updateUser: {\r\n        status: asyncActions.SUCCESS,\r\n        message: action.response.message,\r\n      },\r\n      userDetails: action.userDetails,\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleUpdateUserFailure(state, action) {\r\n  return _.defaults(\r\n    {\r\n      updateUser: {\r\n        status: asyncActions.FAILURE,\r\n        message: action.response.message,\r\n      },\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleUpdateUserPending(state) {\r\n  return _.defaults(\r\n    {\r\n      updateUser: { status: asyncActions.PENDING },\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nexport default { [modelNames.AUTHORIZATION_MODEL]: reducer };\r\n","C:\\Projects\\prop-investor\\src\\modules\\properties\\constants.js",[],"C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\constants.js",[],"C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\actionTypes.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\actions.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\properties\\actions.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\actionTypes.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\actionTypes.ts",[],"C:\\Projects\\prop-investor\\src\\models\\authorization\\constants.js",[],"C:\\Projects\\prop-investor\\src\\modules\\properties\\actionTypes.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\constants.js",[],"C:\\Projects\\prop-investor\\src\\modules\\properties\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\navigationPanel\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\models\\authorization\\actionTypes.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\models\\authorization\\actions.ts",[],"C:\\Projects\\prop-investor\\src\\api\\restService.js",[],"C:\\Projects\\prop-investor\\src\\utils\\asyncActions.js",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\constants.js",[],"C:\\Projects\\prop-investor\\src\\utils\\helpers.js",[],"C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\actions.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\actions.ts",[],"C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\selectors.js",[],"C:\\Projects\\prop-investor\\src\\root\\moduleNames.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\myProfile\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\properties\\selectors.js",[],"C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\root\\modelNames.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\navigationPanel\\navigationPanel.tsx",["357"],"import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport LoginSignupForm from \"components/loginSignupForm/loginSignupForm\";\nimport Sidebar from \"components/sidebar/sidebar\";\nimport { Link } from \"react-router-dom\";\nimport \"./navigationPanel.css\";\nimport {\n  PersonCircle,\n  Power,\n  Tools,\n  Wallet,\n  HouseFill,\n  Building,\n  CurrencyBitcoin,\n} from \"react-bootstrap-icons\";\n\nconst NavigationPanel = (props) => {\n  const {\n    onLogin,\n    onSignup,\n    onLogout,\n    loginInfo,\n    signupInfo,\n    userDetails,\n    onFetchUser,\n  } = props;\n\n  useEffect(() => onFetchUser(), []);\n\n  const [showLogin, setLogin] = useState(false);\n  const [mode, setMode] = useState(null);\n\n  const handleLoginClick = () => {\n    setLogin(true);\n    setMode(\"LOGIN\");\n  };\n  const handleSignupClick = () => {\n    setLogin(true);\n    setMode(\"SIGNUP\");\n  };\n\n  const handleLogoutClick = () => {\n    setLogin(false);\n    setMode(\"Login\");\n    onLogout();\n  };\n\n  const isUserLogged = !_.isEmpty(userDetails);\n\n  const handleLoginModalHide = () => setLogin(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\" sticky=\"top\">\n        <Navbar.Brand>\n          <Link to=\"/\">\n            <CurrencyBitcoin size={35} />\n            lockMyPlot\n          </Link>\n        </Navbar.Brand>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link>\n              <Link to=\"/\">\n                <HouseFill className=\"mr-1\" size={20} />\n                Home\n              </Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"/properties\">\n                <Building className=\"mr-1\" />\n                Properties\n              </Link>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n        {isUserLogged && (\n          <>\n            <Dropdown>\n              <Dropdown.Toggle\n                variant=\"success\"\n                id=\"dropdown-basic\"\n                className=\"border-0 bg-transparent light-gray-color\"\n              >\n                <PersonCircle size={25} className=\"mr-3\" />\n                Welcome, {userDetails.firstName} {userDetails.lastName}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item as={Link} to=\"/my-profile\">\n                    <Tools className=\"mr-2\" />\n                    My Profile\n                </Dropdown.Item>\n                <Dropdown.Item as={Link} to=\"/my-investments\">\n                    <Wallet className=\"mr-2\" />\n                    My Investments\n                </Dropdown.Item>\n                <Dropdown.Item onClick={handleLogoutClick}>\n                  <Power className=\"mr-2\" />\n                  Sign Out\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </>\n        )}\n        {!isUserLogged && (\n          <>\n            <Button\n              variant=\"primary\"\n              className=\"mr-3\"\n              onClick={handleLoginClick}\n            >\n              Log In\n            </Button>\n            <Button\n              variant=\"light\"\n              className=\"mr-3\"\n              onClick={handleSignupClick}\n            >\n              Sign Up\n            </Button>\n          </>\n        )}\n        <div className=\"sidebar-burger\">\n          <Sidebar />\n        </div>\n      </Navbar>\n      {showLogin && !isUserLogged && (\n        <LoginSignupForm\n          handleClose={handleLoginModalHide}\n          mode={mode}\n          onLogin={onLogin}\n          loginInfo={loginInfo}\n          onSignup={onSignup}\n          signupInfo={signupInfo}\n        />\n      )}\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\" fixed=\"bottom\" >\n      <div className=\"light-gray-color\">&#169; 2021</div>\n      </Navbar>\n    </>\n  );\n};\n\nexport default NavigationPanel;\n","C:\\Projects\\prop-investor\\src\\modules\\myInvestments\\myInvestments.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\properties\\properties.tsx",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\selectors.js",[],"C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\selectors.js",[],"C:\\Projects\\prop-investor\\src\\models\\authorization\\selectors.js",[],"C:\\Projects\\prop-investor\\src\\modules\\home\\home.tsx",["358"],"import React from \"react\";\nimport _ from \"lodash\";\nimport Image from \"react-bootstrap/Image\";\nimport PropertyTile from \"components/propertyTile/propertyTile\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport \"./home.css\";\nclass HomeModule extends React.PureComponent<\n  { popularHouses: any; onGetPopularHouses: () => void },\n  { houses: any }\n> {\n  state = {\n    houses: [],\n  };\n\n  componentDidMount() {\n    this.props.onGetPopularHouses();\n  }\n\n  handleGetAllProperties = () => {\n    const {\n      popularHouses: { status, data },\n    } = this.props;\n    const topHouses = _.slice(data, 0, 4);\n    const properties = _.map(topHouses, (property, index) => {\n      return <PropertyTile config={property} key={`property-${index}`} />;\n    });\n    return properties;\n  };\n\n  render() {\n    const allProperties = this.handleGetAllProperties();\n    return (\n      <>\n        <Row className=\"pt-5 pb-5\" id=\"properties\">\n          <Col\n            xs={12}\n            lg={{ span: 5, offset: 1 }}\n            className=\"text-lg-left text-md-center p-4\"\n          >\n            <h1 className=\"pb-4\">\n              Real Estate Investment Made Easy And Accessible To Everyone\n            </h1>\n            <div className=\"text-lg-justify\" style={{ fontSize: \"22px\" }}>\n              For the first time, investors around the globe can buy into the US\n              real estate market through fully-compliant, fractional, tokenized\n              ownership. Powered by blockchain.\n            </div>\n            <Button size=\"lg\" variant=\"outline-primary\" className=\"mt-5\">\n              Know More\n            </Button>\n          </Col>\n          <Col xs={12} lg={5}>\n            <Image src=\"images/banner.png\" fluid />\n          </Col>\n        </Row>\n\n        <h2 className=\"mb-3\">Popular Properties</h2>\n        <Row className=\"justify-content-center\">{allProperties}</Row>\n      </>\n    );\n  }\n}\n\nexport default HomeModule;\n","C:\\Projects\\prop-investor\\src\\modules\\myProfile\\myProfile.tsx",["359"],"import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { withRouter } from 'react-router-dom'\r\nimport * as validationConstants from \"utils/formValidity/constants\";\r\nimport * as countriesConstant from \"utils/constants/countries\";\r\nimport * as statesConstant from \"utils/constants/states\";\r\nimport validation from \"utils/formValidity/validation\";\r\nimport FormFeedback from \"components/formGenerator/formFeedback\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Jumbotron,\r\n  Spinner,\r\n  Toast,\r\n  Col,\r\n  Row,\r\n  InputGroup,\r\n} from \"react-bootstrap\";\r\nimport * as helpers from \"utils/helpers\";\r\nimport { CheckCircleFill, PatchExclamationFill } from \"react-bootstrap-icons\";\r\n\r\nclass MyProfile extends React.PureComponent<\r\n  {\r\n    userDetails: any;\r\n    updateUserStatus: any;\r\n    onUpdateUser: (data: any) => void;\r\n    history: any\r\n  },\r\n  {\r\n    isFormSubmitted: boolean;\r\n    isFormValid: boolean;\r\n    form: any;\r\n    showToast: boolean;\r\n    isReadOnly: boolean;\r\n  }\r\n> {\r\n  state = {\r\n    isFormSubmitted: false,\r\n    isFormValid: false,\r\n    showToast: false,\r\n    isReadOnly: true,\r\n    form: {\r\n      firstName: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.firstName.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.firstName.rules[0].message,\r\n        ],\r\n      },\r\n      lastName: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.lastName.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.lastName.rules[0].message,\r\n        ],\r\n      },\r\n      username: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.username.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.username.rules[0].message,\r\n        ],\r\n      },\r\n      // password: {\r\n      //   valid: false,\r\n      //   value: \"\",\r\n      //   rules: validationConstants.validation.password.rules,\r\n      //   validationMessages: [\r\n      //     validationConstants.validation.password.rules[0].message,\r\n      //   ],\r\n      // },\r\n      city: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.city.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.city.rules[0].message,\r\n        ],\r\n      },\r\n      state: {\r\n        valid: true,\r\n        value: this.props?.userDetails[\"state\"] || statesConstant.statesList[\"Afghanistan\"][0].name,\r\n        // rules: validationConstants.validation.state.rules,\r\n        // validationMessages: [\r\n        //   validationConstants.validation.state.rules[0].message,\r\n        // ],\r\n      },\r\n      zip: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.zip.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.zip.rules[0].message,\r\n        ],\r\n      },\r\n      country: {\r\n        valid: true,\r\n        value: this.props?.userDetails[\"country\"] || \"\",\r\n      },\r\n      tokAddress: {\r\n        valid: false,\r\n        value: \"\",\r\n        // rules: validationConstants.validation.tokAddress.rules,\r\n        // validationMessages: [\r\n        //   validationConstants.validation.tokAddress.rules[0].message,\r\n        // ],\r\n      },\r\n    },\r\n  };\r\n\r\n  // static getDerivedStateFromProps(nextProps, prevState) {\r\n  //   const { userDetails } = nextProps;\r\n  //   const initialFormState = {};\r\n  //   _.forOwn(prevState.form, (value, key) => {\r\n\r\n  //     initialFormState[key] = {\r\n  //       ...prevState.form[key],\r\n  //       value: userDetails[key],\r\n  //       valid: true,\r\n  //     };\r\n  //   });\r\n  //   return {\r\n  //     form: initialFormState,\r\n  //   };\r\n  // }\r\n\r\n\r\n  componentDidMount() {\r\n    const { userDetails } = this.props;\r\n    const initialFormState = {};\r\n    const { form } = this.state;\r\n    _.forOwn(form, (value, key) => {\r\n      const { valid, validationMessages } = validation.checkFieldValidity(\r\n        form[key].rules,\r\n        userDetails[key]\r\n      );\r\n      initialFormState[key] = {\r\n        ...form[key],\r\n        value: userDetails[key],\r\n        valid,\r\n        validationMessages,\r\n      };\r\n    });\r\n    this.setState({ form: initialFormState });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(!helpers.getToken()){\r\n      this.props.history.push(\"/\");\r\n    }\r\n    if (prevProps.userDetails != this.props.userDetails) {\r\n      const { userDetails } = this.props;\r\n      const initialFormState = {};\r\n      const { form } = this.state;\r\n      _.forOwn(form, (value, key) => {\r\n        const { valid, validationMessages } = validation.checkFieldValidity(\r\n          form[key].rules,\r\n          userDetails[key]\r\n        );\r\n        initialFormState[key] = {\r\n          ...form[key],\r\n          value: userDetails[key],\r\n          valid,\r\n          validationMessages,\r\n        };\r\n      });\r\n      this.setState({ form: initialFormState });\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    const { isFormValid } = this.state;\r\n    const { onUpdateUser } = this.props;\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (isFormValid) {\r\n      const postObj = this.generateFormPostObj();\r\n      onUpdateUser(postObj);\r\n      this.setState({ showToast: true, isReadOnly: true });\r\n    }\r\n    this.setState({ isFormSubmitted: true });\r\n  };\r\n\r\n  generateFormPostObj = () => {\r\n    const {userDetails} = this.props;\r\n    let postObj = {};\r\n    _.forOwn(this.state.form, (value, key) => (postObj[key] = value.value));\r\n    postObj = _.assign({}, userDetails, postObj);\r\n    postObj = _.omit(postObj, \"password\");\r\n    return postObj;\r\n  };\r\n\r\n  setFormValidity = () => {\r\n    const { form } = this.state;\r\n    this.setState({ isFormValid: validation.checkFormValidity(form) });\r\n  };\r\n\r\n  updateForm = (id, value) => {\r\n    const { form } = this.state;\r\n    const updatedForm = { ...form };\r\n    const updatedFormField = { ...updatedForm[id] };\r\n    updatedFormField.value = value;\r\n\r\n    const { valid, validationMessages } = validation.checkFieldValidity(\r\n      updatedFormField.rules,\r\n      value\r\n    );\r\n    updatedFormField.valid = valid;\r\n    updatedFormField.validationMessages =\r\n      validationMessages || updatedFormField?.rules[0]?.message;\r\n    updatedForm[id] = updatedFormField;\r\n    if(id ==='country'){\r\n      const state = statesConstant.statesList[value]?.[0]?.name;\r\n      updatedForm['state'].value = state;\r\n    }\r\n    this.setState({ form: updatedForm }, () => this.setFormValidity());\r\n  };\r\n\r\n  handleTextBoxChange = (event) => {\r\n    const { value, id } = event.target;\r\n    this.updateForm(id, value);\r\n  };\r\n\r\n  handleCountryChange = (event) => {\r\n    const { id, value } = event.target;\r\n    this.updateForm(id, value);\r\n  };\r\n\r\n  handleHideToast = () => {\r\n    this.setState({ showToast: false });\r\n  };\r\n\r\n  handleEditTap = () => {\r\n    this.setState({ isReadOnly: false });\r\n  };\r\n\r\n  handleCancelTap = () => {\r\n    this.setState({ isReadOnly: true });\r\n  };\r\n\r\n  render() {\r\n    const { isFormSubmitted, form, showToast, isReadOnly } = this.state;\r\n    const { updateUserStatus, userDetails } = this.props;\r\n    const isPending = helpers.isPending(updateUserStatus.status);\r\n    const isFailure = helpers.isFailure(updateUserStatus.status);\r\n    const isSuccess = helpers.isSuccess(updateUserStatus.status);\r\n    const msg = updateUserStatus?.message;\r\n    const disableForm = isFailure || isReadOnly;\r\n    return (\r\n      <Row className=\"mt-3\">\r\n        <Col xs={12} md={{ span: 6, offset: 1 }}>\r\n          <Form noValidate onSubmit={this.handleSubmit}>\r\n            <Toast\r\n              show={(isFailure || isSuccess) && showToast}\r\n              onClose={this.handleHideToast}\r\n            >\r\n              <Toast.Header>\r\n                <strong className=\"mr-auto\">\r\n                  {isSuccess ? \"Success\" : \"Failed\"}\r\n                </strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{msg}</Toast.Body>\r\n            </Toast>\r\n            <Jumbotron className=\"p-3\">\r\n              <h4>My Profile</h4>\r\n              <div className=\"required d-flex\">* Required fields</div>\r\n              <fieldset disabled={disableForm}>\r\n                <Form.Row>\r\n                  <Col>\r\n                    <Form.Group controlId=\"firstName\" key=\"firstName\">\r\n                      <Form.Label>\r\n                        Enter First Name<span className=\"required\">*</span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Enter First Name\"\r\n                        size=\"sm\"\r\n                        onChange={this.handleTextBoxChange}\r\n                        isValid={form[\"firstName\"].valid}\r\n                        isInvalid={isFormSubmitted && !form[\"firstName\"].valid}\r\n                        value={form[\"firstName\"].value}\r\n                      />\r\n                      <FormFeedback\r\n                        valid={form[\"firstName\"].valid}\r\n                        validationMessages={\r\n                          form[\"firstName\"].validationMessages\r\n                        }\r\n                      />\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col>\r\n                    <Form.Group controlId=\"lastName\" key=\"lastName\">\r\n                      <Form.Label>\r\n                        Enter Last Name<span className=\"required\">*</span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Enter Last Name\"\r\n                        size=\"sm\"\r\n                        onChange={this.handleTextBoxChange}\r\n                        isValid={form[\"lastName\"].valid}\r\n                        isInvalid={isFormSubmitted && !form[\"lastName\"].valid}\r\n                        value={form[\"lastName\"].value}\r\n                      />\r\n                      <FormFeedback\r\n                        valid={form[\"lastName\"].valid}\r\n                        validationMessages={form[\"lastName\"].validationMessages}\r\n                      />\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Form.Row>\r\n                <Form.Group controlId=\"username\" key=\"username\">\r\n                  <Form.Label>\r\n                    Enter Email Address<span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email Address\"\r\n                    size=\"sm\"\r\n                    onChange={this.handleTextBoxChange}\r\n                    isValid={form[\"username\"].valid}\r\n                    isInvalid={isFormSubmitted && !form[\"username\"].valid}\r\n                    value={form[\"username\"].value}\r\n                  />\r\n                  <FormFeedback\r\n                    valid={form[\"username\"].valid}\r\n                    validationMessages={form[\"username\"].validationMessages}\r\n                  />\r\n                </Form.Group>\r\n                {/* <Form.Group controlId=\"password\" key=\"password\">\r\n              <Form.Label>Enter Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                size=\"sm\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"password\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"password\"].valid}\r\n                value={form[\"password\"].value || userDetails[\"password\"]}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"password\"].valid}\r\n                validationMessages={form[\"password\"].validationMessages}\r\n              />\r\n            </Form.Group> */}\r\n                <Form.Group controlId=\"country\">\r\n                  <Form.Label>\r\n                    Select County<span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    onChange={this.handleTextBoxChange}\r\n                    value={form[\"country\"].value}\r\n                  >\r\n                    {_.map(countriesConstant.countriesList, (country) => (\r\n                      <option key={country.code}>{country.name}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"city\" key=\"city\">\r\n                  <Form.Label>\r\n                    Enter City Name<span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter City Name\"\r\n                    size=\"sm\"\r\n                    onChange={this.handleTextBoxChange}\r\n                    isValid={form[\"city\"].valid}\r\n                    isInvalid={isFormSubmitted && !form[\"city\"].valid}\r\n                    value={form[\"city\"].value}\r\n                  />\r\n                  <FormFeedback\r\n                    valid={form[\"city\"].valid}\r\n                    validationMessages={form[\"city\"].validationMessages}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                  <Col>\r\n                    <Form.Group controlId=\"state\" key=\"state\">\r\n                      <Form.Label>\r\n                        Select State<span className=\"required\">*</span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        as=\"select\"\r\n                        size=\"sm\"\r\n                        onChange={this.handleTextBoxChange}\r\n                        value={userDetails[\"state\"]}\r\n                      >\r\n                        {_.map(\r\n                          statesConstant.statesList[form[\"country\"].value],\r\n                          (state) => (\r\n                            <option key={state.id}>{state.name}</option>\r\n                          )\r\n                        )}\r\n                      </Form.Control>\r\n                      {/* <FormFeedback\r\n                        valid={form[\"state\"].valid}\r\n                        validationMessages={form[\"state\"].validationMessages}\r\n                      /> */}\r\n                    </Form.Group>\r\n                  </Col>\r\n                  <Col>\r\n                    <Form.Group controlId=\"zip\" key=\"zip\">\r\n                      <Form.Label>\r\n                        Enter Zip Code<span className=\"required\">*</span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter Zip Code\"\r\n                        size=\"sm\"\r\n                        onChange={this.handleTextBoxChange}\r\n                        isValid={form[\"zip\"].valid}\r\n                        isInvalid={isFormSubmitted && !form[\"zip\"].valid}\r\n                        value={form[\"zip\"].value}\r\n                      />\r\n                      <FormFeedback\r\n                        valid={form[\"zip\"].valid}\r\n                        validationMessages={form[\"zip\"].validationMessages}\r\n                      />\r\n                    </Form.Group>\r\n                  </Col>\r\n                </Form.Row>\r\n                <Form.Group controlId=\"tokAddress\" key=\"tokAddress\">\r\n                  <Form.Label>Enter Token Address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Token Address\"\r\n                    size=\"sm\"\r\n                    onChange={this.handleTextBoxChange}\r\n                    // isValid={form[\"tokAddress\"].valid}\r\n                    // isInvalid={isFormSubmitted && !form[\"tokAddress\"].valid}\r\n                    value={form[\"tokAddress\"].value}\r\n                  />\r\n                  {/* <FormFeedback\r\n                  valid={form[\"tokAddress\"].valid}\r\n                  validationMessages={form[\"tokAddress\"].validationMessages}\r\n                /> */}\r\n                </Form.Group>\r\n              </fieldset>\r\n              {isReadOnly && (\r\n                <Button\r\n                  variant=\"light\"\r\n                  type=\"submit\"\r\n                  size=\"sm\"\r\n                  className=\"mr-2\"\r\n                  onClick={this.handleEditTap}\r\n                >\r\n                  Edit Profile\r\n                </Button>\r\n              )}\r\n              {!isReadOnly && (\r\n                <Button\r\n                  variant=\"light\"\r\n                  type=\"submit\"\r\n                  size=\"sm\"\r\n                  className=\"mr-2\"\r\n                  onClick={this.handleCancelTap}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              )}\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                size=\"sm\"\r\n                disabled={isPending}\r\n              >\r\n                Save Changes\r\n                {isPending && (\r\n                  <Spinner\r\n                    as=\"span\"\r\n                    animation=\"border\"\r\n                    size=\"sm\"\r\n                    role=\"status\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                )}\r\n              </Button>\r\n            </Jumbotron>\r\n          </Form>\r\n        </Col>\r\n        <Col xs={12} md={4}>\r\n          <Jumbotron className=\"p-3\">\r\n            <h4>KYC Details</h4>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Kyc Verified</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={userDetails[\"kycStatus\"] === false ? \"No\" : \"Yes\"}\r\n                disabled\r\n                className={\r\n                  userDetails[\"kycStatus\"] === false ? \"kyc-fail\" : \"kyc-pass\"\r\n                }\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>\r\n                  {userDetails[\"kycStatus\"] === false ? (\r\n                    <PatchExclamationFill size={25} />\r\n                  ) : (\r\n                    <CheckCircleFill size={25} />\r\n                  )}\r\n                </InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            {userDetails[\"kycStatus\"] === false ? (\r\n              <Button variant=\"primary\">Verify Now</Button>\r\n            ) : null}\r\n          </Jumbotron>\r\n          <Jumbotron className=\"p-3\">\r\n            <h4>Account Details</h4>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Email Verified</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={\r\n                  userDetails[\"emailVerificationStatus\"] === false\r\n                    ? \"No\"\r\n                    : \"Yes\"\r\n                }\r\n                disabled\r\n                className={\r\n                  userDetails[\"emailVerificationStatus\"] === false\r\n                    ? \"kyc-fail\"\r\n                    : \"kyc-pass\"\r\n                }\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>\r\n                  {userDetails[\"emailVerificationStatus\"] === false ? (\r\n                    <PatchExclamationFill size={25} />\r\n                  ) : (\r\n                    <CheckCircleFill size={25} />\r\n                  )}\r\n                </InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            {userDetails[\"emailVerificationStatus\"] === false ? (\r\n              <Button variant=\"primary\">Verify Now</Button>\r\n            ) : null}\r\n          </Jumbotron>\r\n          <Jumbotron className=\"p-3\">\r\n            <h4>Manage Password</h4>\r\n            <Button variant=\"primary\" className=\"mr-3 mb-3\">\r\n              Change Password\r\n            </Button>\r\n            <Button variant=\"light\" className=\"mr-3 mb-3\">\r\n              Forgot Password\r\n            </Button>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(MyProfile);\r\n","C:\\Projects\\prop-investor\\src\\modules\\propertyDetails\\propertyDetails.tsx",["360","361","362","363"],"import React from \"react\";\nimport _ from \"lodash\";\nimport Image from \"react-bootstrap/Image\";\nimport {\n  Row,\n  Col,\n  Jumbotron,\n  Accordion,\n  Card,\n  InputGroup,\n  ListGroup,\n  ProgressBar,\n} from \"react-bootstrap\";\nimport { withRouter } from \"react-router\";\nimport { imageBasePath } from \"utils/constants/imageConstants\";\nimport \"./propertyDetails.css\";\n\nclass PropertyDetails extends React.PureComponent<\n  {\n    propertyDetails: any;\n    onGetPropertyDetails: (propertyId) => void;\n    onResetPropertyDetails: () => void;\n    match: any;\n  },\n  { houses: any; activeHouseImg: any; activeAccordion: any }\n> {\n  state = {\n    houses: [],\n    activeHouseImg: null,\n    activeAccordion: null,\n  };\n\n  componentDidMount() {\n    const {\n      match: { params },\n    } = this.props;\n    this.props.onGetPropertyDetails(params.propertyId);\n  }\n\n  componentWillUnmount() {\n    this.props.onResetPropertyDetails();\n  }\n\n  handleActiveImgChange = (src) => {\n    this.setState({ activeHouseImg: src });\n  };\n\n  handleAccordionToggle = (event) => {\n    // this.setState({ activeHouseImg: src });\n    console.log(event);\n  };\n\n  render() {\n    const {\n      propertyDetails: { status, data },\n    } = this.props;\n    const { activeHouseImg } = this.state;\n    const imgSrc = data && data.imageFile && data.imageFile[0];\n    const activeSrc =\n      activeHouseImg || `${imageBasePath}/${data?.id}/${imgSrc}`;\n    const isDataEmpty = _.isEmpty(data);\n    return (\n      <>\n        <h2 className=\"pb-2\">Property Details</h2>\n        <InputGroup className=\"pb-3 justify-content-center\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"basic-addon1\" className=\"fix-width\">\n              Token Address\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <ListGroup>\n            <ListGroup.Item>{data?.smartContractAdd || \"-\"}</ListGroup.Item>\n          </ListGroup>\n        </InputGroup>\n\n        <Row>\n          <Col xs={12} md={6}>\n            <Jumbotron className=\"p-1\">\n              <div>\n                {!isDataEmpty && (\n                  <>\n                    <h4 className=\"pt-3\">{data.name}</h4>\n                    <div>{data.about}</div>\n\n                    <Accordion defaultActiveKey=\"0\" className=\"pt-3\">\n                      <Card>\n                        <Card.Header className=\"p-0\">\n                          <Accordion.Toggle\n                            as={Card.Header}\n                            eventKey=\"0\"\n                            onClick={() => this.handleAccordionToggle(\"0\")}\n                          >\n                            <h6 className=\"cursor-pointer\">\n                              Property Investment Details\n                            </h6>\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"0\">\n                          <Card.Body>\n                            <Row>\n                              <Col sm={12} className=\"mb-3\">\n                                Funds Generated\n                                <ProgressBar\n                                  striped\n                                  animated\n                                  variant=\"success\"\n                                  now={40}\n                                  label={`$2,500 of $10,000`}\n                                />\n                              </Col>\n                              <Col sm={6}>\n                                <InputGroup className=\"mb-3\">\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      id=\"basic-addon1\"\n                                      className=\"fix-width justify-content-center\"\n                                    >\n                                      Value (USD)\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                  <ListGroup>\n                                    <ListGroup.Item className=\"fix-width\">\n                                      {data.value}\n                                    </ListGroup.Item>\n                                  </ListGroup>\n                                </InputGroup>\n                              </Col>\n                              <Col sm={6}>\n                                <InputGroup className=\"mb-3\">\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      id=\"basic-addon1\"\n                                      className=\"fix-width justify-content-center\"\n                                    >\n                                      Expected Returns (USD)\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                  <ListGroup>\n                                    <ListGroup.Item className=\"fix-width\">\n                                      {data.returns || \"-\"}\n                                    </ListGroup.Item>\n                                  </ListGroup>\n                                </InputGroup>\n                              </Col>\n                            </Row>\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header className=\"p-0\">\n                          <Accordion.Toggle\n                            as={Card.Header}\n                            eventKey=\"1\"\n                            onClick={() => this.handleAccordionToggle(\"1\")}\n                          >\n                            <h6 className=\"cursor-pointer\">Property Details</h6>\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"1\">\n                          <Card.Body>\n                            <Row>\n                              <Col sm={6} className=\"text-sm-left border-right\">\n                                <h6>Complete Address</h6>\n                                <div>{data.address_1}</div>\n                                <div>{data.address_2}</div>\n                                <div>{data.city}</div>\n                                <div>{data.state}</div>\n                                <div>{data.country}</div>\n                                <div>{data.zip}</div>\n                              </Col>\n                              <Col sm={6}>\n                                <InputGroup className=\"mb-3\">\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      id=\"basic-addon1\"\n                                      className=\"fix-width\"\n                                    >\n                                      Number of Bathrooms\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                  <ListGroup>\n                                    <ListGroup.Item className=\"fix-width-small\">\n                                      {data.numOfBathrooms}\n                                    </ListGroup.Item>\n                                  </ListGroup>\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      id=\"basic-addon1\"\n                                      className=\"fix-width\"\n                                    >\n                                      Number of Bedrooms\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                  <ListGroup>\n                                    <ListGroup.Item className=\"fix-width-small\">\n                                      {data.numOfBedrooms}\n                                    </ListGroup.Item>\n                                  </ListGroup>\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      id=\"basic-addon1\"\n                                      className=\"fix-width\"\n                                    >\n                                      Area(Square Feet)\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                  <ListGroup>\n                                    <ListGroup.Item className=\"fix-width-small\">\n                                      {data.squareFeet}\n                                    </ListGroup.Item>\n                                  </ListGroup>\n                                </InputGroup>\n                              </Col>\n                            </Row>\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                    </Accordion>\n                  </>\n                )}\n              </div>\n            </Jumbotron>\n          </Col>\n          {!isDataEmpty && (\n            <Col\n              xs={12}\n              // lg={{ span: 5, offset: 1 }}\n              md={6}\n              className=\"text-lg-left text-md-center\"\n            >\n              {_.map(data.imageFile, (image, index) => {\n                if (index == \"0\") {\n                  return (\n                    <Image\n                      src={activeSrc}\n                      fluid\n                      className=\"d-block\"\n                      key={image}\n                    />\n                  );\n                } else {\n                  let classNames = [\"pt-3\"];\n                  if (index != \"1\") {\n                    classNames.push(\"pl-3\");\n                  }\n                  const cNames = classNames.join(\" \");\n                  return (\n                    <Image\n                      src={`${imageBasePath}/${data.id}/${image}`}\n                      fluid\n                      width=\"150\"\n                      height=\"150\"\n                      className={cNames}\n                      key={image}\n                      onClick={() =>\n                        this.handleActiveImgChange(\n                          `${imageBasePath}/${data.id}/${image}`\n                        )\n                      }\n                    />\n                  );\n                }\n              })}\n            </Col>\n          )}\n        </Row>\n        <Row className=\"pb-5\">\n          {!isDataEmpty && (\n            <Col>\n              <h4 className=\"pt-3\">Map Location</h4>\n              <iframe\n                src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d1582.8162758923565!2d-121.9485773!3d37.4929966!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x808fc654f67bbf49%3A0x2d4f6c443c47fb25!2sTesla!5e0!3m2!1sen!2suk!4v1622986935125!5m2!1sen!2suk\"\n                width=\"600\"\n                height=\"250\"\n              ></iframe>\n            </Col>\n          )}\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default withRouter(PropertyDetails);\n","C:\\Projects\\prop-investor\\src\\components\\sidebar\\sidebar.tsx",[],"C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\loginSignupForm.tsx",[],"C:\\Projects\\prop-investor\\src\\components\\propertyTile\\propertyTile.tsx",["364"],"import React from \"react\";\nimport _ from \"lodash\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./propertyTile.css\";\nimport { Col, Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { imageBasePath } from \"utils/constants/imageConstants\";\nclass PropertyTile extends React.PureComponent<\n  { config: any; key: string },\n  { houses: any }\n> {\n  render() {\n    const { config, key } = this.props;\n    return (\n      <Col\n        key={key}\n        xs={12}\n        md={6}\n        lg={3}\n        className=\"d-inline-block\"\n        id=\"property-tile\"\n      >\n        <Jumbotron className=\"p-3\">\n          <h3>{config.name}</h3>\n          <Image\n            src={`${imageBasePath}/${config.id}/${config?.imageFile?.[0]}`}\n            fluid\n            className=\"fixed-height\"\n          />\n          {/* <Image src=\"images/house6.jpeg\" fluid className=\"fixed-height\" /> */}\n          <p className=\"property-about\" title={config.about}>{config.about}</p>\n          <p>\n            <Link\n              to={`/property-details/${config.id}`}\n              className=\"redirect-button\"\n            >\n              <Button variant=\"primary\">Learn more</Button>\n            </Link>\n          </p>\n        </Jumbotron>\n      </Col>\n    );\n  }\n}\n\nexport default PropertyTile;\n","C:\\Projects\\prop-investor\\src\\components\\registerNewProperty\\registerNewProperty.tsx",["365"],"import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Button, Form, Modal, Col } from \"react-bootstrap\";\r\nimport FormFeedback from \"components/formGenerator/formFeedback\";\r\nimport validation from \"utils/formValidity/validation\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport * as countriesConstant from \"utils/constants/countries\";\r\nimport * as statesConstant from \"utils/constants/states\";\r\nimport * as validationConstants from \"utils/formValidity/constants\";\r\n\r\nclass RegisterNewPropertyForm extends React.PureComponent<\r\n  {\r\n    onClose: () => void;\r\n    onRegisterProperty: (obj: any) => void;\r\n    registerPropertyStatus: any;\r\n  },\r\n  { isFormSubmitted: boolean; isFormValid: boolean; form: any }\r\n> {\r\n  state = {\r\n    isFormSubmitted: false,\r\n    isFormValid: false,\r\n    form: {\r\n      name: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.propertyname.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.propertyname.rules[0].message,\r\n        ],\r\n      },\r\n      address_1: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.address.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.address.rules[0].message,\r\n        ],\r\n      },\r\n      address_2: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.address.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.address.rules[0].message,\r\n        ],\r\n      },\r\n      city: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.city.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.city.rules[0].message,\r\n        ],\r\n      },\r\n      state: {\r\n        valid: true,\r\n        value: statesConstant.statesList[\"Afghanistan\"][0].name,\r\n        // rules: validationConstants.validation.state.rules,\r\n        // validationMessages: [\r\n        //   validationConstants.validation.state.rules[0].message,\r\n        // ],\r\n      },\r\n      landmark: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.landmark.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.landmark.rules[0].message,\r\n        ],\r\n      },\r\n      country: {\r\n        valid: true,\r\n        value: \"Afghanistan\",\r\n      },\r\n      zip: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.zip.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.zip.rules[0].message,\r\n        ],\r\n      },\r\n      mapLink: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.mapLink.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.mapLink.rules[0].message,\r\n        ],\r\n      },\r\n      numberOfBathrooms: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.rooms.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.rooms.rules[0].message,\r\n        ],\r\n      },\r\n      numberOfBedrooms: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.rooms.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.rooms.rules[0].message,\r\n        ],\r\n      },\r\n      squareFeet: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.area.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.area.rules[0].message,\r\n        ],\r\n      },\r\n      value: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.value.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.value.rules[0].message,\r\n        ],\r\n      },\r\n      fileImage: {\r\n        valid: false,\r\n        value: \"\",\r\n        rules: validationConstants.validation.images.rules,\r\n        validationMessages: [\r\n          validationConstants.validation.images.rules[0].message,\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    bsCustomFileInput.init();\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    const { isFormValid } = this.state;\r\n    const { onRegisterProperty } = this.props;\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    // onRegisterProperty(this.generateFormPostObj());\r\n    if (isFormValid) {\r\n      const postObj = this.generateFormPostObj();\r\n      onRegisterProperty(postObj);\r\n    }\r\n    this.setState({ isFormSubmitted: true });\r\n  };\r\n\r\n  generateFormPostObj = () => {\r\n    const formData: any = new FormData();\r\n    _.forOwn(this.state.form, (obj, key) => {\r\n      if (key === \"fileImage\") {\r\n        _.forEach(obj.value, (image) => {\r\n          formData.append(key, image);\r\n        });\r\n      } else {\r\n        formData.append(key, obj.value);\r\n      }\r\n    });\r\n    formData.append(\"id\", 1321);\r\n    formData.append(\"about\", \"Test prop\");\r\n    for (var value of formData.values()) {\r\n      console.log(value);\r\n    }\r\n    return formData;\r\n  };\r\n\r\n  setFormValidity = () => {\r\n    const { form } = this.state;\r\n    this.setState({ isFormValid: validation.checkFormValidity(form) });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const files = event.target.files;\r\n\r\n    this.updateForm(\"fileImage\", files);\r\n  };\r\n\r\n  updateForm = (id, value) => {\r\n    const { form } = this.state;\r\n    const updatedForm = { ...form };\r\n    const updatedFormField = { ...updatedForm[id] };\r\n    updatedFormField.value = value;\r\n\r\n    const { valid, validationMessages } = validation.checkFieldValidity(\r\n      updatedFormField.rules,\r\n      value\r\n    );\r\n    updatedFormField.valid = valid;\r\n    updatedFormField.validationMessages =\r\n      validationMessages || updatedFormField?.rules[0]?.message;\r\n    updatedForm[id] = updatedFormField;\r\n    if (id === \"country\") {\r\n      const state = statesConstant.statesList[value][0].name;\r\n      updatedForm[\"state\"].value = state;\r\n    }\r\n    this.setState({ form: updatedForm }, () => this.setFormValidity());\r\n  };\r\n\r\n  handleTextBoxChange = (event) => {\r\n    const { value, id } = event.target;\r\n    this.updateForm(id, value);\r\n  };\r\n\r\n  handleCountryChange = (event) => {\r\n    const { id, value } = event.target;\r\n    this.updateForm(id, value);\r\n  };\r\n\r\n  render() {\r\n    const { isFormSubmitted, form } = this.state;\r\n    const { onClose } = this.props;\r\n    return (\r\n      <Modal show onHide={onClose}>\r\n        <Form noValidate onSubmit={this.handleSubmit}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Register New</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form.Group controlId=\"name\" key=\"name\">\r\n              <Form.Label>\r\n                Enter Property Name<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Name\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"name\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"name\"].valid}\r\n                value={form[\"name\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"name\"].valid}\r\n                validationMessages={form[\"name\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"address_1\" key=\"address_1\">\r\n              <Form.Label>\r\n                Enter Address Line 1<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Address Line 1\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"address_1\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"address_1\"].valid}\r\n                value={form[\"address_1\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"address_1\"].valid}\r\n                validationMessages={form[\"address_1\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"address_2\" key=\"address_2\">\r\n              <Form.Label>\r\n                Enter Address Line 2<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Address Line 2\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"address_2\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"address_2\"].valid}\r\n                value={form[\"address_2\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"address_2\"].valid}\r\n                validationMessages={form[\"address_2\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"country\">\r\n              <Form.Label>\r\n                Select County<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                size=\"lg\"\r\n                onChange={this.handleCountryChange}\r\n              >\r\n                {_.map(countriesConstant.countriesList, (country) => (\r\n                  <option key={country.code}>{country.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"city\" key=\"city\">\r\n              <Form.Label>\r\n                Enter City Name<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter City Name\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"city\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"city\"].valid}\r\n                value={form[\"city\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"city\"].valid}\r\n                validationMessages={form[\"city\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"state\" key=\"state\">\r\n              <Form.Label>\r\n                Select State<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n              >\r\n                {_.map(\r\n                  statesConstant.statesList[form[\"country\"].value],\r\n                  (state) => (\r\n                    <option key={state.id}>{state.name}</option>\r\n                  )\r\n                )}\r\n              </Form.Control>\r\n              {/* <FormFeedback\r\n              valid={form[\"state\"].valid}\r\n              validationMessages={form[\"state\"].validationMessages}\r\n            /> */}\r\n            </Form.Group>\r\n            <Form.Group controlId=\"zip\" key=\"zip\">\r\n              <Form.Label>\r\n                Enter Zip Code<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Zip Code\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"zip\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"zip\"].valid}\r\n                value={form[\"zip\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"zip\"].valid}\r\n                validationMessages={form[\"zip\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"landmark\" key=\"landmark\">\r\n              <Form.Label>\r\n                Enter Landmark<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Landmark Name\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"landmark\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"landmark\"].valid}\r\n                value={form[\"landmark\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"landmark\"].valid}\r\n                validationMessages={form[\"landmark\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"mapLink\" key=\"mapLink\">\r\n              <Form.Label>\r\n                Enter mapLink<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Map Link\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"mapLink\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"mapLink\"].valid}\r\n                value={form[\"mapLink\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"mapLink\"].valid}\r\n                validationMessages={form[\"mapLink\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"numberOfBathrooms\" key=\"numberOfBathrooms\">\r\n              <Form.Label>\r\n                Enter Number Of Bathrooms<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Number Of Bathrooms\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"numberOfBathrooms\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"numberOfBathrooms\"].valid}\r\n                value={form[\"numberOfBathrooms\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"numberOfBathrooms\"].valid}\r\n                validationMessages={\r\n                  form[\"numberOfBathrooms\"].validationMessages\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"numberOfBedrooms\" key=\"numberOfBedrooms\">\r\n              <Form.Label>\r\n                Enter Number Of Bedrooms<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Number Of Bedrooms\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"numberOfBedrooms\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"numberOfBedrooms\"].valid}\r\n                value={form[\"numberOfBedrooms\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"numberOfBedrooms\"].valid}\r\n                validationMessages={form[\"numberOfBedrooms\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"squareFeet\" key=\"squareFeet\">\r\n              <Form.Label>\r\n                Enter Area(square Feet)<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Area in Square Feet\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"squareFeet\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"squareFeet\"].valid}\r\n                value={form[\"squareFeet\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"squareFeet\"].valid}\r\n                validationMessages={form[\"squareFeet\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"value\" key=\"value\">\r\n              <Form.Label>\r\n                Enter value(USD)<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Property value\"\r\n                size=\"lg\"\r\n                onChange={this.handleTextBoxChange}\r\n                isValid={form[\"value\"].valid}\r\n                isInvalid={isFormSubmitted && !form[\"value\"].valid}\r\n                value={form[\"value\"].value}\r\n              />\r\n              <FormFeedback\r\n                valid={form[\"value\"].valid}\r\n                validationMessages={form[\"value\"].validationMessages}\r\n              />\r\n            </Form.Group>\r\n            <Form.File\r\n              className=\"position-relative\"\r\n              required\r\n              name=\"file\"\r\n              label={`Property Image`}\r\n              onChange={this.handleChange}\r\n              isValid={form[\"fileImage\"].valid}\r\n              multiple\r\n              id=\"fileImage\"\r\n              feedbackTooltip\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer className=\"justify-content-center\">\r\n            <Button variant=\"primary\" type=\"submit\" size=\"lg\" block>\r\n              Register\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterNewPropertyForm;\r\n","C:\\Projects\\prop-investor\\src\\utils\\constants\\states.js",[],"C:\\Projects\\prop-investor\\src\\utils\\formValidity\\validation.js",["366"],"import _ from \"lodash\";\nimport * as constants from \"./constants\";\n\nconst validateEmail = (value) => constants.EMAIL_REGEX.test(value);\n\nconst validateRequired = (value) =>\n  !_.isNil(value) && constants.NON_EMPTY_REGEX.test(value);\n\nconst validateAlphabets = (value) => constants.ONLY_ALHABETS.test(value);\n\nconst validateAlphabetWithSpaces = (value) => constants.ALHABET_WITH_SPACE.test(value);\n\nconst validateZipCode = (value) => constants.ZIP_CODE.test(value);\n\nconst validateNumbers = (value) => constants.ONLY_NUMBERS.test(value);\n\nconst pushValidationMessage = (result, message, validationMessages) => {\n  if (!result) {\n    validationMessages.push(message);\n  }\n};\n\nconst validateRule = (rule, value, validationMessages) => {\n  let result = true;\n  switch (rule.id) {\n    case \"EMAIL\":\n      result = validateEmail(value);\n      pushValidationMessage(result, rule.message, validationMessages);\n      return result;\n    case \"REQUIRED\":\n      result = validateRequired(value);\n      pushValidationMessage(result, rule.message, validationMessages);\n      return result;\n    case \"ALPHABETS\":\n      result = validateAlphabets(value);\n      pushValidationMessage(result, rule.message, validationMessages);\n      return result;\n    case \"ZIP_CODE\":\n      result = validateZipCode(value);\n      pushValidationMessage(result, rule.message, validationMessages);\n      return result;\n    case \"NUMBERS\":\n      result = validateNumbers(value);\n      pushValidationMessage(result, rule.message, validationMessages);\n      return result;\n    case \"ALPHABET_WITH_SPACE\":\n      result = validateAlphabetWithSpaces(value);\n      pushValidationMessage(result, rule.message, validationMessages);\n      return result;\n  }\n};\n\nconst validation = {\n  checkFieldValidity: (rules, value) => {\n    const validationMessages = [];\n    const isValid = _.reduce(\n      rules,\n      (valid, rule) => valid && validateRule(rule, value, validationMessages),\n      true\n    );\n    return { valid: isValid, validationMessages };\n  },\n  checkFormValidity: (form) => {\n    let isValid = true;\n    _.forOwn(form, (value, key) => {\n      isValid = isValid && form[key].valid;\n    });\n\n    return isValid;\n  },\n};\n\nexport default validation;\n","C:\\Projects\\prop-investor\\src\\utils\\formValidity\\constants.js",[],"C:\\Projects\\prop-investor\\src\\utils\\constants\\countries.js",[],"C:\\Projects\\prop-investor\\src\\components\\formGenerator\\formFeedback.tsx",[],"C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\signUpForm.tsx",[],"C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\loginForm.tsx",[],"C:\\Projects\\prop-investor\\src\\components\\loginSignupForm\\constants.js",[],["367","368"],"C:\\Projects\\prop-investor\\src\\utils\\constants\\imageConstants.js",[],"C:\\Projects\\prop-investor\\src\\models\\loader\\reducer.ts",["369"],"import * as actionTypes from \"./actionTypes\";\r\nimport _ from \"lodash\";\r\nimport * as modelNames from \"root/modelNames\";\r\n\r\nexport const initialState = {\r\n  showLoader: false,\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SHOW_LOADER:\r\n      return handleShowLoader(state, action);\r\n\r\n    case actionTypes.HIDE_LOADER:\r\n      return handleHideLoader(state, action);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction handleShowLoader(state, action) {\r\n  return _.defaults(\r\n    {\r\n      showLoader: true\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\nfunction handleHideLoader(state, action) {\r\n  return _.defaults(\r\n    {\r\n      showLoader: false\r\n    },\r\n    state\r\n  );\r\n}\r\n\r\n\r\nexport default { [modelNames.LOADER_MODEL]: reducer };\r\n","C:\\Projects\\prop-investor\\src\\models\\loader\\actionTypes.ts",[],"C:\\Projects\\prop-investor\\src\\models\\loader\\actions.ts",[],"C:\\Projects\\prop-investor\\src\\models\\loader\\container.tsx",[],"C:\\Projects\\prop-investor\\src\\models\\loader\\selectors.js",[],"C:\\Projects\\prop-investor\\src\\models\\loader\\loader.tsx",[],"C:\\Projects\\prop-investor\\src\\models\\loader\\constants.js",[],{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","replacedBy":"373"},{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","replacedBy":"373"},{"ruleId":"374","severity":1,"message":"375","line":24,"column":1,"nodeType":"376","endLine":24,"endColumn":31},{"ruleId":"374","severity":1,"message":"375","line":28,"column":1,"nodeType":"376","endLine":28,"endColumn":31},{"ruleId":"374","severity":1,"message":"375","line":46,"column":1,"nodeType":"376","endLine":46,"endColumn":51},{"ruleId":"374","severity":1,"message":"377","line":86,"column":1,"nodeType":"376","endLine":86,"endColumn":61},{"ruleId":"374","severity":1,"message":"375","line":29,"column":1,"nodeType":"376","endLine":29,"endColumn":31},{"ruleId":"374","severity":1,"message":"377","line":52,"column":1,"nodeType":"376","endLine":52,"endColumn":65},{"ruleId":"374","severity":1,"message":"377","line":62,"column":1,"nodeType":"376","endLine":62,"endColumn":67},{"ruleId":"374","severity":1,"message":"377","line":49,"column":1,"nodeType":"376","endLine":49,"endColumn":55},{"ruleId":"374","severity":1,"message":"375","line":96,"column":1,"nodeType":"376","endLine":96,"endColumn":73},{"ruleId":"374","severity":1,"message":"377","line":214,"column":1,"nodeType":"376","endLine":214,"endColumn":62},{"ruleId":"378","severity":1,"message":"379","line":32,"column":34,"nodeType":"380","endLine":32,"endColumn":36,"suggestions":"381"},{"ruleId":"382","severity":1,"message":"383","line":21,"column":24,"nodeType":"384","messageId":"385","endLine":21,"endColumn":30},{"ruleId":"386","severity":1,"message":"387","line":154,"column":31,"nodeType":"388","messageId":"389","endLine":154,"endColumn":33},{"ruleId":"382","severity":1,"message":"383","line":55,"column":26,"nodeType":"384","messageId":"385","endLine":55,"endColumn":32},{"ruleId":"386","severity":1,"message":"390","line":232,"column":27,"nodeType":"388","messageId":"389","endLine":232,"endColumn":29},{"ruleId":"386","severity":1,"message":"387","line":243,"column":29,"nodeType":"388","messageId":"389","endLine":243,"endColumn":31},{"ruleId":"391","severity":1,"message":"392","line":271,"column":15,"nodeType":"393","endLine":275,"endColumn":16},{"ruleId":"382","severity":1,"message":"394","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":9},{"ruleId":"382","severity":1,"message":"395","line":3,"column":31,"nodeType":"384","messageId":"385","endLine":3,"endColumn":34},{"ruleId":"396","severity":1,"message":"397","line":25,"column":3,"nodeType":"398","messageId":"399","endLine":50,"endColumn":4},{"ruleId":"370","replacedBy":"400"},{"ruleId":"372","replacedBy":"401"},{"ruleId":"374","severity":1,"message":"377","line":41,"column":1,"nodeType":"376","endLine":41,"endColumn":55},"no-native-reassign",["402"],"no-negated-in-lhs",["403"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onFetchUser'. Either include it or remove the dependency array.","ArrayExpression",["404"],"@typescript-eslint/no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'_' is defined but never used.","'Col' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["402"],["403"],"no-global-assign","no-unsafe-negation",{"desc":"405","fix":"406"},"Update the dependencies array to be: [onFetchUser]",{"range":"407","text":"408"},[781,783],"[onFetchUser]"]